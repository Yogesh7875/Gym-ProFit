@using Gym_Management_System.Models;
@model CombineView

@{
    ViewBag.Title = "Payment";
}

<style>
    .payment-form .card {
        margin-bottom: 20px;
    }

    .payment-form .form-group {
        margin-bottom: 20px;
    }

    .payment-form label {
        font-weight: bold;
    }

    .payment-form .text-danger {
        color: red;
    }

    .payment-form .btn-primary {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 12px 30px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
        width: 400px;
        margin: 0 auto 20px;
        display: block;
    }

        .payment-form .btn-primary:hover {
            background-color: #0056b3;
        }
</style>

@using (Html.BeginForm("Create", "Dashboard", FormMethod.Post, new { @class = "payment-form" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h2 class="h4 mb-0">Add Member</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.Name)
                            @Html.EditorFor(model => model.member.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Name", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.member.Name, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.Phone)
                            @Html.EditorFor(model => model.member.Phone, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Phone", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.member.Phone, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.Email)
                            @Html.EditorFor(model => model.member.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Email", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.member.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.JoiningDate)
                            @Html.EditorFor(model => model.member.JoiningDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.member.JoiningDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.DOB)
                            @Html.EditorFor(model => model.member.DOB, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.member.DOB, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.member.Address)
                            @Html.EditorFor(model => model.member.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Address", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.member.Address, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="form-label">Gender</label>
                            <div class="form-check">
                                @Html.RadioButtonFor(model => model.member.Gender, "Male", new { @class = "form-check-input" })
                                <label class="form-check-label" for="male">Male</label>
                            </div>
                            <div class="form-check">
                                @Html.RadioButtonFor(model => model.member.Gender, "Female", new { @class = "form-check-input" })
                                <label class="form-check-label" for="female">Female</label>
                            </div>
                            <div class="form-check">
                                @Html.RadioButtonFor(model => model.member.Gender, "Other", new { @class = "form-check-input" })
                                <label class="form-check-label" for="other">Other</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h2 class="h4 mb-0">Membership Details</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.Membership, "Plan")
                            @Html.DropDownListFor(model => model.transaction.Membership, ViewBag.MembershipPlans as SelectList, "Select Membership Plan", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.transaction.Membership, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.Trainer, "Trainer Assigned")
                            @Html.DropDownListFor(model => model.transaction.Trainer, ViewBag.trainerSelect as SelectList, "Select Trainer", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.transaction.Trainer, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.Days, "Membership Days")
                            @Html.EditorFor(m => m.transaction.Days, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Membership Days", @required = "required", @id = "daysInput" } })
                            @Html.ValidationMessageFor(model => model.transaction.Days, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.MembershipEndDate, "Membership End")
                            @Html.EditorFor(m => m.transaction.MembershipEndDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Membership End Date", @required = "required", @id = "endDateInput" } })
                            @Html.ValidationMessageFor(model => model.transaction.MembershipEndDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.OfferPrice, "Offered Price")
                            @Html.EditorFor(m => m.transaction.OfferPrice, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Offered Price", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.transaction.OfferPrice, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.PaidAmount, "Paid Amount")
                            @Html.EditorFor(m => m.transaction.PaidAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Amount", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.transaction.PaidAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.PaymentDate, "Payment Date")
                            @Html.EditorFor(m => m.transaction.PaymentDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.transaction.PaymentDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.DueDate, "Due Date")
                            @Html.EditorFor(m => m.transaction.DueDate, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.transaction.DueDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.transaction.PaymentMode, "Payment Mode")
                            @Html.DropDownListFor(model => model.transaction.PaymentMode, new SelectList(new[]
                            {
                                new SelectListItem { Text = "Choose Mode", Value = "" },
                                new SelectListItem { Text = "Cash", Value = "Cash" },
                                new SelectListItem { Text = "UPI", Value = "UPI" },
                                new SelectListItem { Text = "Google Pay", Value = "Google Pay" },
                                new SelectListItem { Text = "Phone Pay", Value = "Phone Pay" }
                            }, "Value", "Text"), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="text-right mt-3">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </div>
}

<script>
    document.getElementById('daysInput').addEventListener('input', function() {
        const days = parseInt(this.value, 10);
        if (!isNaN(days)) {
            const today = new Date();
            today.setDate(today.getDate() + days);
            const endDate = today.toISOString().split('T')[0];
            document.getElementById('endDateInput').value = endDate;
        } else {
            document.getElementById('endDateInput').value = '';
        }
    });
</script>